
#include <array>
#include <iostream>
#include <string>
#include <memory>
#include <fstream>
#include <cmath>

using namespace std;

const string FILE_NAME = "Airports.csv";

class Airport {
private:
	string AirportCode;
	double N, W;
	string CityName;
	string StateCode;

public:
	//Default Constructor
	Airport() {
		AirportCode = "";
		StateCode = "";
		CityName = "";
		N = 0.0; W = 0.0;
	}
	//Parameter Constructor
	Airport(string Airportz, double Nvalue, double Wvalue, string City, string State) {
		AirportCode = Airportz;
		StateCode = State;
		CityName = City;
		N = Nvalue; W = Wvalue;
	}
	//Copy Constructor
	Airport(Airport &src) {
		AirportCode = src.AirportCode;
		StateCode = src.StateCode;
		CityName = src.CityName;
		N = src.N; W = src.W;
	}
	//Copy Constructor
	Airport(const Airport &src) {
		AirportCode = src.AirportCode;
		StateCode = src.StateCode;
		CityName = src.CityName;
		N = src.N; W = src.W;
	}
	//Destructor
	~Airport() {}

	//Accessors
	string getAirportCode() { return AirportCode; }
	string getCityName() { return CityName; }
	string getStateCode() { return StateCode; }
	double getPositionN() { return N; }
	double getPositionW() { return W; }
	void setAirportCode(string src) { AirportCode = src; }
	void setCityName(string src) { CityName = src; }
	void setStateCode(string src) { StateCode = src; }
	void setPositionN(double src) { N = src; }
	void setPositionW(double src) { W = src; }
	friend ostream& operator << (ostream& stream, const Airport& thePort)
	{
		stream << thePort.AirportCode << "(" << thePort.N << ", " << thePort.W << ")";
		return stream;
	}  // end displayBag
	friend bool operator == (const Airport &portA, const Airport &portB)
	{
		return (portA.AirportCode == portB.AirportCode);
	}
};

template<typename T>
class BagInterface
{
public:
	/** Gets the current number of entries in this bag.
	@return The integer number of entries currently in the bag. */
	virtual int getCurrentSize() const = 0;

	/** Sees whether this bag is empty.
	@return True if the bag is empty, or false if not. */
	virtual bool isEmpty() const = 0;

	/** Adds a new entry to this bag.
	@post  If successful, newEntry is stored in the bag and
	the count of items in the bag has increased by 1.
	@param newEntry  The object to be added as a new entry.
	@return  True if addition was successful, or false if not. */
	virtual bool add(const T& newEntry) = 0;

	/** Removes one occurrence of a given entry from this bag,
	if possible.
	@post  If successful, anEntry has been removed from the bag
	and the count of items in the bag has decreased by 1.
	@param anEntry  The entry to be removed.
	@return  True if removal was successful, or false if not. */
	virtual bool remove(const T& anEntry) = 0;

	/** Removes all entries from this bag.
	@post  Bag contains no items, and the count of items is 0. */
	virtual void clear() = 0;

	/** Counts the number of times a given entry appears in bag.
	@param anEntry  The entry to be counted.
	@return  The number of times anEntry appears in the bag. */
	virtual int getFrequencyOf(const T& anEntry) const = 0;

	/** Tests whether this bag contains a given entry.
	@param anEntry  The entry to locate.
	@return  True if bag contains anEntry, or false otherwise. */
	virtual bool contains(const T& anEntry) const = 0;

}; // end BagInterface


template <typename T>
class Node
{
private:
	T	item; // A data item
	shared_ptr<Node<T>>prev; // Pointer to last node
	shared_ptr<Node<T>> next; // Pointer to next node

public:
	//STURCTORS
	Node():last(nullptr), next(nullptr){}
	Node(const T& anItem) {item = anItem;}
	Node(const T& anItem, shared_ptr<Node<T>> prevPTR, shared_ptr<Node<T>> nextPTR)
	{ item = anItem; prev = prevPTR; next = nextPTR; }
	Node(const Node<T> &src) 
	{ item = src.item; prev = src.prev; next = src.next;}
	//SETTERS
	void setItem(const T& anItem) { item = anItem; }
	void setNext(shared_ptr<Node<T>> PTR) { next = PTR; }
	void setPrev(shared_ptr<Node<T>> PTR) { prev = PTR; }
	//GETTERS
	T getItem() const { return item; }
	shared_ptr<Node<T>> getNext() const { return next; }
	shared_ptr<Node<T>> getPrev() const { return prev; }
}; 

// Head is a node that will never have data
// This design is useful when operating Linklist with loop.
template <typename T>
class DoublyLinkedBag : public BagInterface<T> {
private:
	//VARS
	shared_ptr<Node<T>> head;
	shared_ptr<Node<T>> tail;
	int cnt;

public:
	//CONSTRUCTOR
	DoublyLinkedBag() {
		cnt = 0;
		head = 0;
			tail = 0;
	}
	/*~DoublyLinkedBag() {
		shared_ptr<Node<T>> ptr(head);
		shared_ptr<Node<T>> tmp(head);
		for (int i = 0; i < cnt + 1; i++) {
			ptr = tmp;
			tmp = tmp->getNext();
			ptr->setNext(nullptr);
			ptr->setLast(nullptr);
		}
		ptr.reset();
		tmp.reset();
		
	}*/
	~DoublyLinkedBag() {
		clear();
	}
	//A func return Current Size
	int getCurrentSize() const { return cnt;}
	//A func return if empty
	bool isEmpty() const { return (cnt == 0); }
	//Push a item into list
	bool add(const T& newEntry);
	//Remove a item from list with a sample
	bool remove(const T& anEntry);
	//Traverse
	bool displayItems();
	//Search and Return a Index (-1 if not found)
	int searchForward(const T& sample);
	int searchBackward(const T& sample);
	//Entry
	T getEntry(int index);
	//Destory the list
	void clear();
	//Get the frequecy of the sample item
	int getFrequencyOf(const T& anEntry) const;
	//See if linklist contain the sample item
	bool contains(const T& anEntry) const;
	//Debugger
	void debugDisplay();
};

template <typename T>
bool DoublyLinkedBag<T>::add(const T& newEntry) {
	shared_ptr<Node<T>> newNode(new Node<T>(newEntry));
	if (head == 0)
	{
		tail = head=newNode;
	}
	else 
	{
		tail->setNext(newNode);
		newNode->setPrev(tail);
		tail = newNode;
	}
	cnt++;
	return true;
}

template <typename T>
bool DoublyLinkedBag<T>::remove(const T& anEntry) {
	shared_ptr<Node<T>> nodePtr(head);
	for (int i = 0; i < cnt; i++)
	{
		if (nodePtr->getItem() == anEntry)
		{
			if (cnt == 1) {
				head = tail = NULL;
			}
			else if (nodePtr == head)
			{
				head = head->getNext();
				head->setPrev(NULL);
				nodePtr.reset();
				cnt--;
			}
			else if (nodePtr == tail)
			{
				tail = tail->getPrev();
				tail->setNext(NULL);
				nodePtr.reset();
				cnt--;
			}
			else
			{
				nodePtr->getNext()->setPrev(nodePtr->getPrev());
				nodePtr->getPrev()->setNext(nodePtr->getNext());
				nodePtr.reset();
				cnt--;
			}
			return true;
		}
		nodePtr = nodePtr->getNext();
	}
	return false;
}

template<typename T>
bool DoublyLinkedBag<T>::displayItems()
{
	shared_ptr<Node<T>> theNode(head);
	cout << "Item List : \n";
	for (int i = 0; i < cnt; i++)
	{
		cout << "Item " << i << " : " << theNode->getItem() << endl;
		theNode = theNode->getNext();
	}
	return (cnt);
}

template<typename T>
int DoublyLinkedBag<T>::searchForward(const T & sample)
{
	shared_ptr<Node<T>> theNode(head);
	for (int i = 0; i < cnt; i++)
	{
		if (theNode->getItem() == sample)	return i;
		theNode = theNode->getNext();
	}
	return -1;
}

template<typename T>
int DoublyLinkedBag<T>::searchBackward(const T & sample)
{
	shared_ptr<Node<T>> theNode(tail);
	for (int i = cnt; i >0; i--)
	{
		if (theNode->getItem() == sample)	return i-1;
		theNode = theNode->getPrev();
	}
	return -1;
}

template<typename T>
T DoublyLinkedBag<T>::getEntry(int index)
{
	shared_ptr<Node<T>> theNode(head);
	if (index > -1 && index < cnt) {
		for (int i = 0; i < index; i++)
		{
			theNode = theNode->getNext();
		}
		return theNode->getItem();
	}
	else return T();
}

template <typename T>
void DoublyLinkedBag<T>::clear() {
	shared_ptr<Node<T>> rover = head;
	while (rover)
	{
		T number = rover->getItem();
		rover = rover->getNext();
		remove(number);
	}
	head = 0;
}


template <typename T>
int DoublyLinkedBag<T>::getFrequencyOf(const T& anEntry) const {
	shared_ptr<Node<T>>nodePtr(head);
	int counter = 0;
	for (int i = 0; i < cnt; i++) {
		if (nodePtr->getItem() == anEntry) counter++;
		nodePtr = nodePtr->getNext();
	}
	return counter;
}

template <typename T>
bool DoublyLinkedBag<T>::contains(const T& anEntry) const {
	return (getFrequencyOf(anEntry));
}

template <typename T>
void DoublyLinkedBag<T>::debugDisplay() {
	shared_ptr<Node<T>>nodePtr(head);
	cout << "=== DEBUGER ===\n";
	cout << "Count : " << cnt << endl;
	cout << "Is Empty : " << isEmpty() << endl;
	for (int i = 0; i < cnt; i++) {
		cout << i << ". " << nodePtr->getItem() << endl;
		nodePtr = nodePtr->getNext();
	}
	cout << "=== ENDED ===\n";
}

void enableDebug(bool bvalue)
{
	if (!bvalue) return;

	int tmpFlag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);

	// Turn on leak-checking bit.
	tmpFlag |= _CRTDBG_LEAK_CHECK_DF;

	// Turn off CRT block checking bit.
	tmpFlag &= ~_CRTDBG_CHECK_CRT_DF;

	// Set flag to the new value.
	_CrtSetDbgFlag(tmpFlag);
}

bool airportReader(DoublyLinkedBag<Airport> &theBASE, string FILENAME) {

	//BUILD A READER
	ifstream reader(FILENAME);

	//READ LINES
	while (reader) {
		string info[6];
		getline(reader, info[0]);
		if (info[0] != "") {

			//SPLIT BY COMMA
			int tracker = 1;
			for (int i = 0; i < info[0].length(); i++) {
				if (info[0][i] == ',')
					tracker++;
				else
					info[tracker] += info[0][i];
			}

			//MADE NEW AIRPORT
			//Airport* newAirport = new Airport(info[1], stod(info[2]), stod(info[3]), info[4], info[5]);
			Airport newAirport(info[1], stod(info[2]), stod(info[3]), info[4], info[5]);
			theBASE.add(newAirport);
		}
	}
	reader.close();
	return true;
}

#define R 6371
#define TO_RAD (3.1415926536 / 180)
double dist(double th1, double ph1, double th2, double ph2)
{
	double dx, dy, dz;
	ph1 -= ph2;
	ph1 *= TO_RAD, th1 *= TO_RAD, th2 *= TO_RAD;

	dz = sin(th1) - sin(th2);
	dx = cos(ph1) * cos(th1) - cos(th2);
	dy = sin(ph1) * cos(th1);
	return asin(sqrt(dx * dx + dy * dy + dz * dz) / 2) * 2 * R;
}

void main()
{
	enableDebug(true);

	DoublyLinkedBag<Airport> AirportBase;
	airportReader(AirportBase, FILE_NAME);
	//AirportBase.debugDisplay();
	AirportBase.displayItems();

	Airport airportA, airportB;
    string airportCode;

	cout << "\n\n Choose first airport code : ";
	cin >> airportCode;
	airportA.setAirportCode(airportCode);
	airportA = AirportBase.getEntry(AirportBase.searchForward(airportA));

	cout << "\n\n Choose second airport code : ";
	cin >> airportCode;
	airportB.setAirportCode(airportCode);
	airportB = AirportBase.getEntry(AirportBase.searchBackward(airportB));

	cout << "\n\nThe Two locations are : " << endl;
	cout << "Airport A : " << airportA.getPositionN() << " " << airportA.getPositionW() << endl;
	cout << "Airport B : " << airportB.getPositionN() << " " << airportB.getPositionW() << endl;
	cout << "Distance : " << dist(airportA.getPositionN(), airportA.getPositionW(), airportB.getPositionN(), airportB.getPositionW());
}  // end main

